#include <cassert>
#include <cstdlib>

// Invariant of the ADT:
//   root_ptr is the root pointer of a binary search tree that contains the
//   bag's items.

namespace main_savitch_10 {
  template <class Item>
	void bst_remove_max(binary_tree_node<Item>*& root_ptr, Item& removed)
	{
	    
    if (root_ptr == NULL)
    {
        return ;
    }
    else 
    {
      if (root_ptr->right() != NULL) 
      {
          bst_remove_max(root_ptr->right(), removed);
      }
      else if (root_ptr->right() == NULL) 
      {
        removed = root_ptr->data();
        binary_tree_node <Item>* tmp_ptr = root_ptr;
        root_ptr = root_ptr->left();
        delete tmp_ptr;
      }
    }
	}

  template <class Item>
	bool bst_remove(binary_tree_node<Item>*& root_ptr, const Item& target)
	{
	    binary_tree_node<Item> *oldroot_ptr;

	    if (root_ptr == NULL)
	    {
		      return false;
	    }

	    if (target < root_ptr->data( ))
	    {  
      		return bst_remove(root_ptr->left( ), target);
	    }

	    if (target > root_ptr->data( ))
	    {   
        	return bst_remove(root_ptr->right( ), target);
	    }

	    if (root_ptr->left( ) == NULL)
	    {   
      		oldroot_ptr = root_ptr;
      		root_ptr = root_ptr->right( );
      		delete oldroot_ptr;
      		return true;
	    }
	    bst_remove_max(root_ptr->left( ), root_ptr->data( ));
	    return true;
	}

  template <class Item>
	typename bag<Item>::size_type bst_remove_all
	(binary_tree_node<Item>*& root_ptr, const Item& target)
	{
	    binary_tree_node<Item> *oldroot_ptr;

	    if (root_ptr == NULL)
	    {
          return 0;
	    }

	    if (target < root_ptr->data( ))
	    {  
          bst_remove_all(root_ptr->left(), target);
	    }

	    if (target > root_ptr->data( ))
	    {   
          bst_remove_all(root_ptr->right(), target);
	    }

	    if (root_ptr->left( ) == NULL)
	    {   
      		oldroot_ptr = root_ptr;
      		root_ptr = root_ptr->right( );
      		delete oldroot_ptr;
      		return 1;
	    }
      bst_remove_all(root_ptr->left(), root_ptr->data());
	    return bst_remove_all(root_ptr, target);
	}

  template <class Item>
	bag<Item>::bag(const bag<Item>& source)
	{
	    root_ptr = tree_copy(source.root_ptr);
	}

  template <class Item>
	bag<Item>::~bag( )
	{
	    tree_clear(root_ptr);
	}

  template <class Item>
	typename bag<Item>::size_type bag<Item>::size( ) const
	{
	    return tree_size(root_ptr);
	}

  template <class Item>
	void bag<Item>::insert(const Item& entry)
	{
	    binary_tree_node<Item> *cursor;

	    if (root_ptr == NULL)
	    {
    		root_ptr = new binary_tree_node<Item>(entry);
    		return;
	    }

	    else
	    { 
    		cursor = root_ptr;
    		
        while(1) 
        {
          if (cursor->data() < entry) 
          {
            if (cursor->right() == NULL) 
            {
              cursor->right() = new binary_tree_node<Item>(entry);
              break;
            }
            cursor = cursor->right();
          }
          else if (cursor->data() > entry) 
          {
            if (cursor->left() == NULL) 
            {
              cursor->left() = new binary_tree_node<Item>(entry);
              break;
            }
            cursor = cursor->left();
          }
          else if (cursor->data() == entry) 
          {
            if (cursor->left() == NULL) 
            {
              cursor->left() = new binary_tree_node<Item>(entry);
              break;
            }
            cursor = cursor->left();
          }
       }
	  }
	}

  template <class Item>
	typename bag<Item>::size_type bag<Item>::count(const Item& target) const
	{
	    size_type answer = 0;
	    binary_tree_node<Item> *cursor;

	    cursor = root_ptr;
	    if (root_ptr == NULL) return 0;
      else 
      {
        while (cursor != NULL) 
        {
          if (cursor->data() < target)
          {
              cursor = cursor->right();
          }
          else if (cursor->data() > target)
          {
              cursor = cursor->left();
          }
          else 
          {
            answer++;
            cursor = cursor->left();
          }
        }
      }
	    return answer;
	}

  template <class Item>
	typename bag<Item>::size_type bag<Item>::erase(const Item& target)
	{
	    return bst_remove_all(root_ptr, target);
	}

  template <class Item>
	bool bag<Item>::erase_one(const Item& target)
	{
	    return bst_remove(root_ptr, target);
	}

  template <class Item>
	void bag<Item>::operator =(const bag<Item>& source)
        {
	    if (root_ptr == source.root_ptr)
	    {
	        return;
	    }
	    tree_clear(root_ptr);
	    root_ptr = tree_copy(source.root_ptr);
	}

  template <class Item>
	void bag<Item>::operator +=(const bag<Item>& addend) {
	    if (root_ptr == addend.root_ptr)
	    {
    		bag<Item> copy = addend;
    		insert_all(copy.root_ptr);
	    }
	    else insert_all(addend.root_ptr);
	}

  template <class Item>
	bag<Item> operator +(const bag<Item>& b1, const bag<Item>& b2)
	{
	    bag<Item> answer = b1;
	    answer += b2;
	    return answer;
	}

  template <class Item>
	void bag<Item>::insert_all(binary_tree_node<Item>* addroot_ptr)
	{
	    if (addroot_ptr != NULL)
	    {
    		insert(addroot_ptr->data( ));
    		insert_all(addroot_ptr->left( ));
    		insert_all(addroot_ptr->right( ));
	    }
	}
}